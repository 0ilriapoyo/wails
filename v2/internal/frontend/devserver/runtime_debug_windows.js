(() => {
  var __defProp = Object.defineProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
  var __export = (target, all) => {
    __markAsModule(target);
    for (var name in all)
      __defProp(target, name, {get: all[name], enumerable: true});
  };

  // desktop/log.js
  var log_exports = {};
  __export(log_exports, {
    LogDebug: () => LogDebug,
    LogError: () => LogError,
    LogFatal: () => LogFatal,
    LogInfo: () => LogInfo,
    LogLevel: () => LogLevel,
    LogPrint: () => LogPrint,
    LogTrace: () => LogTrace,
    LogWarning: () => LogWarning,
    SetLogLevel: () => SetLogLevel
  });

  // desktop/ipc.js
  var listeners = [];

  function SendMessage(message) {
    if (true) {
      window.chrome.webview.postMessage(message);
    } else if (false) {
      window.blah();
    } else {
      console.error("Unsupported Platform");
    }
    if (listeners.length > 0) {
      for (let i = 0; i < listeners.length; i++) {
        listeners[i](message);
      }
    }
  }

  // desktop/log.js
  function sendLogMessage(level, message) {
    SendMessage("L" + level + message);
  }

  function LogTrace(message) {
    sendLogMessage("T", message);
  }

  function LogPrint(message) {
    sendLogMessage("P", message);
  }

  function LogDebug(message) {
    sendLogMessage("D", message);
  }

  function LogInfo(message) {
    sendLogMessage("I", message);
  }

  function LogWarning(message) {
    sendLogMessage("W", message);
  }

  function LogError(message) {
    sendLogMessage("E", message);
  }

  function LogFatal(message) {
    sendLogMessage("F", message);
  }

  function SetLogLevel(loglevel) {
    sendLogMessage("S", loglevel);
  }

  var LogLevel = {
    TRACE: 1,
    DEBUG: 2,
    INFO: 3,
    WARNING: 4,
    ERROR: 5
  };

  // desktop/events.js
  var Listener = class {
    constructor(callback, maxCallbacks) {
      maxCallbacks = maxCallbacks || -1;
      this.Callback = (data) => {
        callback.apply(null, data);
        if (maxCallbacks === -1) {
          return false;
        }
        maxCallbacks -= 1;
        return maxCallbacks === 0;
      };
    }
  };
  var eventListeners = {};

  function EventsOnMultiple(eventName, callback, maxCallbacks) {
    eventListeners[eventName] = eventListeners[eventName] || [];
    const thisListener = new Listener(callback, maxCallbacks);
    eventListeners[eventName].push(thisListener);
  }

  function EventsOn(eventName, callback) {
    EventsOnMultiple(eventName, callback, -1);
  }

  function EventsOnce(eventName, callback) {
    EventsOnMultiple(eventName, callback, 1);
  }

  function notifyListeners(eventData) {
    let eventName = eventData.name;
    if (eventListeners[eventName]) {
      const newEventListenerList = eventListeners[eventName].slice();
      for (let count = 0; count < eventListeners[eventName].length; count += 1) {
        const listener = eventListeners[eventName][count];
        let data = eventData.data;
        const destroy = listener.Callback(data);
        if (destroy) {
          newEventListenerList.splice(count, 1);
        }
      }
      eventListeners[eventName] = newEventListenerList;
    }
  }

  function EventsNotify(notifyMessage) {
    console.log("EventsNotify");
    let message;
    try {
      message = JSON.parse(notifyMessage);
    } catch (e) {
      const error = "Invalid JSON passed to Notify: " + notifyMessage;
      throw new Error(error);
    }
    console.log({message});
    notifyListeners(message);
  }

  function EventsEmit(eventName) {
    const payload = {
      name: eventName,
      data: [].slice.apply(arguments).slice(1)
    };
    notifyListeners(payload);
    SendMessage("EE" + JSON.stringify(payload));
  }

  function EventsOff(eventName) {
    eventListeners.delete(eventName);
    SendMessage("EX" + eventName);
  }

  // desktop/calls.js
  var callbacks = {};

  function cryptoRandom() {
    var array = new Uint32Array(1);
    return window.crypto.getRandomValues(array)[0];
  }

  function basicRandom() {
    return Math.random() * 9007199254740991;
  }

  var randomFunc;
  if (window.crypto) {
    randomFunc = cryptoRandom;
  } else {
    randomFunc = basicRandom;
  }

  function Call(name, args, timeout) {
    if (timeout == null) {
      timeout = 0;
    }
    return new Promise(function (resolve, reject) {
      var callbackID;
      do {
        callbackID = name + "-" + randomFunc();
      } while (callbacks[callbackID]);
      var timeoutHandle;
      if (timeout > 0) {
        timeoutHandle = setTimeout(function () {
          reject(Error("Call to " + name + " timed out. Request ID: " + callbackID));
        }, timeout);
      }
      callbacks[callbackID] = {
        timeoutHandle,
        reject,
        resolve
      };
      try {
        const payload = {
          name,
          args,
          callbackID
        };
        SendMessage("C" + JSON.stringify(payload));
      } catch (e) {
        console.error(e);
      }
    });
  }

  function Callback(incomingMessage) {
    var message;
    try {
      message = JSON.parse(incomingMessage);
    } catch (e) {
      const error = `Invalid JSON passed to callback: ${e.message}. Message: ${incomingMessage}`;
      wails.LogDebug(error);
      throw new Error(error);
    }
    var callbackID = message.callbackid;
    var callbackData = callbacks[callbackID];
    if (!callbackData) {
      const error = `Callback '${callbackID}' not registered!!!`;
      console.error(error);
      throw new Error(error);
    }
    clearTimeout(callbackData.timeoutHandle);
    delete callbacks[callbackID];
    if (message.error) {
      callbackData.reject(message.error);
    } else {
      callbackData.resolve(message.result);
    }
  }

  // desktop/bindings.js
  window.backend = {};

  function SetBindings(bindingsMap) {
    try {
      bindingsMap = JSON.parse(bindingsMap);
    } catch (e) {
      console.error(e);
    }
    window.backend = window.backend || {};
    Object.keys(bindingsMap).forEach((packageName) => {
      window.backend[packageName] = window.backend[packageName] || {};
      Object.keys(bindingsMap[packageName]).forEach((structName) => {
        window.backend[packageName][structName] = window.backend[packageName][structName] || {};
        Object.keys(bindingsMap[packageName][structName]).forEach((methodName) => {
          window.backend[packageName][structName][methodName] = function () {
            let timeout = 0;

            function dynamic() {
              const args = [].slice.call(arguments);
              return Call([packageName, structName, methodName].join("."), args, timeout);
            }

            dynamic.setTimeout = function (newTimeout) {
              timeout = newTimeout;
            };
            dynamic.getTimeout = function () {
              return timeout;
            };
            return dynamic;
          }();
        });
      });
    });
  }

  // desktop/main.js
  window.backend = {};
  window.runtime = {
    ...log_exports,
    EventsOn,
    EventsOnce,
    EventsOnMultiple,
    EventsEmit,
    EventsOff
  };
  window.wails = {
    Callback,
    EventsNotify,
    SetBindings
  };
  window.wails.SetBindings(window.wailsbindings);
  delete window.wails.SetBindings;
  delete window.wailsbindings;
  window.addEventListener("mousedown", (e) => {
    let currentElement = e.target;
    while (currentElement != null) {
      if (currentElement.hasAttribute("data-wails-no-drag")) {
        break;
      } else if (currentElement.hasAttribute("data-wails-drag")) {
        SendMessage("drag");
        break;
      }
      currentElement = currentElement.parentElement;
    }
  });
})();
//# sourceMappingURL=data:application/json;base64,
