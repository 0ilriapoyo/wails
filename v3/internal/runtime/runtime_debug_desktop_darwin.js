(() => {
  // desktop/ipc.js
  var postMessage = null;
  (function() {
    let _deeptest = function(s) {
      var obj = window[s.shift()];
      while (obj && s.length)
        obj = obj[s.shift()];
      return obj;
    };
    let windows = _deeptest(["chrome", "webview", "postMessage"]);
    let mac_linux = _deeptest(["webkit", "messageHandlers", "external", "postMessage"]);
    if (!windows && !mac_linux) {
      console.error("Unsupported Platform");
      return;
    }
    if (windows) {
      postMessage = (message) => window.chrome.webview.postMessage(message);
    }
    if (mac_linux) {
      postMessage = (message) => window.webkit.messageHandlers.external.postMessage(message);
    }
  })();
  function invoke(message, id) {
    if (id && id !== -1) {
      postMessage("WINDOWID:" + id + ":" + message);
    } else {
      postMessage(message);
    }
  }

  // desktop/calls.js
  var callbacks = {};
  function cryptoRandom() {
    var array = new Uint32Array(1);
    return window.crypto.getRandomValues(array)[0];
  }
  function basicRandom() {
    return Math.random() * 9007199254740991;
  }
  var randomFunc;
  if (window.crypto) {
    randomFunc = cryptoRandom;
  } else {
    randomFunc = basicRandom;
  }
  function Call(name, args, timeout) {
    if (timeout == null) {
      timeout = 0;
    }
    let windowID = window.wails.window.ID();
    return new Promise(function(resolve, reject) {
      var callbackID;
      do {
        callbackID = name + "-" + randomFunc();
      } while (callbacks[callbackID]);
      var timeoutHandle;
      if (timeout > 0) {
        timeoutHandle = setTimeout(function() {
          reject(Error("Call to " + name + " timed out. Request ID: " + callbackID));
        }, timeout);
      }
      callbacks[callbackID] = {
        timeoutHandle,
        reject,
        resolve
      };
      try {
        const payload = {
          name,
          args,
          callbackID,
          windowID
        };
        window.WailsInvoke("C" + JSON.stringify(payload));
      } catch (e) {
        console.error(e);
      }
    });
  }
  window.ObfuscatedCall = (id, args, timeout) => {
    if (timeout == null) {
      timeout = 0;
    }
    return new Promise(function(resolve, reject) {
      var callbackID;
      do {
        callbackID = id + "-" + randomFunc();
      } while (callbacks[callbackID]);
      var timeoutHandle;
      if (timeout > 0) {
        timeoutHandle = setTimeout(function() {
          reject(Error("Call to method " + id + " timed out. Request ID: " + callbackID));
        }, timeout);
      }
      callbacks[callbackID] = {
        timeoutHandle,
        reject,
        resolve
      };
      try {
        const payload = {
          id,
          args,
          callbackID,
          windowID: window.wails.window.ID()
        };
        window.WailsInvoke("c" + JSON.stringify(payload));
      } catch (e) {
        console.error(e);
      }
    });
  };
  function Callback(incomingMessage) {
    let message;
    try {
      message = JSON.parse(incomingMessage);
    } catch (e) {
      const error = `Invalid JSON passed to callback: ${e.message}. Message: ${incomingMessage}`;
      runtime.LogDebug(error);
      throw new Error(error);
    }
    let callbackID = message.callbackid;
    let callbackData = callbacks[callbackID];
    if (!callbackData) {
      const error = `Callback '${callbackID}' not registered!!!`;
      console.error(error);
      throw new Error(error);
    }
    clearTimeout(callbackData.timeoutHandle);
    delete callbacks[callbackID];
    if (message.error) {
      callbackData.reject(message.error);
    } else {
      callbackData.resolve(message.result);
    }
  }

  // desktop/events.js
  var eventListeners = {};
  function notifyListeners(eventData) {
    let eventName = eventData.name;
    if (eventListeners[eventName]) {
      const newEventListenerList = eventListeners[eventName].slice();
      for (let count = 0; count < eventListeners[eventName].length; count += 1) {
        const listener = eventListeners[eventName][count];
        let data = eventData.data;
        const destroy = listener.Callback(data);
        if (destroy) {
          newEventListenerList.splice(count, 1);
        }
      }
      if (newEventListenerList.length === 0) {
        removeListener(eventName);
      } else {
        eventListeners[eventName] = newEventListenerList;
      }
    }
  }
  function EventsNotify(notifyMessage) {
    let message;
    try {
      message = JSON.parse(notifyMessage);
    } catch (e) {
      const error = "Invalid JSON passed to Notify: " + notifyMessage;
      throw new Error(error);
    }
    notifyListeners(message);
  }
  function removeListener(eventName) {
    delete eventListeners[eventName];
    window.WailsInvoke("EX" + eventName);
  }

  // desktop/bindings.js
  window.go = {};
  function SetBindings(bindingsMap) {
    try {
      bindingsMap = JSON.parse(bindingsMap);
    } catch (e) {
      console.error(e);
    }
    window.go = window.go || {};
    Object.keys(bindingsMap).forEach((packageName) => {
      window.go[packageName] = window.go[packageName] || {};
      Object.keys(bindingsMap[packageName]).forEach((structName) => {
        window.go[packageName][structName] = window.go[packageName][structName] || {};
        Object.keys(bindingsMap[packageName][structName]).forEach((methodName) => {
          window.go[packageName][structName][methodName] = function() {
            let timeout = 0;
            function dynamic() {
              const args = [].slice.call(arguments);
              return Call([packageName, structName, methodName].join("."), args, timeout);
            }
            dynamic.setTimeout = function(newTimeout) {
              timeout = newTimeout;
            };
            dynamic.getTimeout = function() {
              return timeout;
            };
            return dynamic;
          }();
        });
      });
    });
  }

  // desktop/window.js
  function newWindow(id) {
    return {
      Center: () => invoke("Wc", id),
      SetTitle: (title) => invoke("WT" + title, id),
      Fullscreen: () => invoke("WF", id),
      UnFullscreen: () => invoke("Wf", id),
      SetSize: (width, height) => invoke("WS" + width + "," + height, id),
      GetSize: () => {
        return Call(":wails:WindowGetSize");
      },
      SetMaxSize: (width, height) => invoke("WZ:" + width + ":" + height, id),
      SetMinSize: (width, height) => invoke("Wz:" + width + ":" + height, id),
      SetAlwaysOnTop: (b) => invoke("WATP:" + (b ? "1" : "0"), id),
      SetPosition: (x, y) => invoke("Wp:" + x + ":" + y, id),
      GetPosition: () => {
        return Call(":wails:WindowGetPos");
      },
      Hide: () => invoke("WH", id),
      Maximise: () => invoke("WM", id),
      Show: () => invoke("WS", id),
      ToggleMaximise: () => invoke("Wt", id),
      UnMaximise: () => invoke("WU", id),
      Minimise: () => invoke("Wm", id),
      UnMinimise: () => invoke("Wu", id),
      SetBackgroundColour: (R, G, B, A) => invoke(
        "Wr:" + JSON.stringify({
          r: R || 0,
          g: G || 0,
          b: B || 0,
          a: A || 255
        }, id)
      )
    };
  }

  // desktop/main.js
  window.wails = {
    Callback,
    callbacks,
    EventsNotify,
    eventListeners,
    SetBindings
  };
  function newRuntime(id) {
    return {
      Window: newWindow(id),
      Show: () => invoke("S"),
      Hide: () => invoke("H"),
      Quit: () => invoke("Q")
    };
  }
  window.runtime = newRuntime(-1);
  if (true) {
    console.log("Wails v3.0.0 Debug Mode Enabled");
  }
})();
//# sourceMappingURL=data:application/json;base64,
