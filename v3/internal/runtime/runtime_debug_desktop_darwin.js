(() => {
  var __defProp = Object.defineProperty;
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };

  // desktop/ipc.js
  var postMessage = null;
  (function() {
    let _deeptest = function(s) {
      let obj = window[s.shift()];
      while (obj && s.length)
        obj = obj[s.shift()];
      return obj;
    };
    let windows = _deeptest(["chrome", "webview", "postMessage"]);
    let mac_linux = _deeptest(["webkit", "messageHandlers", "external", "postMessage"]);
    if (!windows && !mac_linux) {
      console.error("Unsupported Platform");
      return;
    }
    if (windows) {
      postMessage = (message) => window.chrome.webview.postMessage(message);
    }
    if (mac_linux) {
      postMessage = (message) => window.webkit.messageHandlers.external.postMessage(message);
    }
  })();
  function invoke(message, id) {
    if (id && id !== -1) {
      postMessage("WINDOWID:" + id + ":" + message);
    } else {
      postMessage(message);
    }
  }

  // desktop/calls.js
  var callbacks = {};
  function cryptoRandom() {
    let array = new Uint32Array(1);
    return window.crypto.getRandomValues(array)[0];
  }
  function basicRandom() {
    return Math.random() * 9007199254740991;
  }
  var randomFunc;
  if (window.crypto) {
    randomFunc = cryptoRandom;
  } else {
    randomFunc = basicRandom;
  }
  window.ObfuscatedCall = (id, args, timeout) => {
    if (timeout == null) {
      timeout = 0;
    }
    return new Promise(function(resolve, reject) {
      let callbackID;
      do {
        callbackID = id + "-" + randomFunc();
      } while (callbacks[callbackID]);
      let timeoutHandle;
      if (timeout > 0) {
        timeoutHandle = setTimeout(function() {
          reject(Error("Call to method " + id + " timed out. Request ID: " + callbackID));
        }, timeout);
      }
      callbacks[callbackID] = {
        timeoutHandle,
        reject,
        resolve
      };
      try {
        const payload = {
          id,
          args,
          callbackID,
          windowID: window.wails.window.ID()
        };
        window.WailsInvoke("c" + JSON.stringify(payload));
      } catch (e) {
        console.error(e);
      }
    });
  };

  // desktop/bindings.js
  window.go = {};

  // desktop/runtime.js
  var runtimeURL = window.location.origin + "/wails/runtime";
  function runtimeCall(method, args) {
    let url = new URL(runtimeURL);
    url.searchParams.append("method", method);
    url.searchParams.append("args", JSON.stringify(args));
    return new Promise((resolve, reject) => {
      fetch(url).then((response) => {
        if (response.ok) {
          if (response.headers.get("content-type") && response.headers.get("content-type").indexOf("application/json") !== -1) {
            return response.json();
          } else {
            return response.text();
          }
        }
        reject(Error(response.statusText));
      }).then((data) => resolve(data)).catch((error) => reject(error));
    });
  }
  function newRuntimeCaller(object, id) {
    if (!id || id === -1) {
      return function(method, args) {
        args = args || {};
        return runtimeCall(object + "." + method, args);
      };
    }
    return function(method, args) {
      args = args || {};
      args["windowID"] = id;
      return runtimeCall(object + "." + method, args);
    };
  }

  // node_modules/nanoid/non-secure/index.js
  var urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
  var nanoid = (size = 21) => {
    let id = "";
    let i = size;
    while (i--) {
      id += urlAlphabet[Math.random() * 64 | 0];
    }
    return id;
  };

  // desktop/dialogs.js
  var call = newRuntimeCaller("dialog");
  var dialogResponses = /* @__PURE__ */ new Map();
  function generateID() {
    let result;
    do {
      result = nanoid();
    } while (dialogResponses.has(result));
    return result;
  }
  function dialogCallback(id, data, isJSON) {
    let p = dialogResponses.get(id);
    if (p) {
      if (isJSON) {
        p.resolve(JSON.parse(data));
      } else {
        p.resolve(data);
      }
      dialogResponses.delete(id);
    }
  }
  function dialogErrorCallback(id, message) {
    let p = dialogResponses.get(id);
    if (p) {
      p.reject(message);
      dialogResponses.delete(id);
    }
  }
  function dialog(type, options) {
    return new Promise((resolve, reject) => {
      let id = generateID();
      options = options || {};
      options["dialog-id"] = id;
      dialogResponses.set(id, { resolve, reject });
      call(type, options).catch((error) => {
        reject(error);
        dialogResponses.delete(id);
      });
    });
  }
  function Info(options) {
    return dialog("Info", options);
  }
  function Warning(options) {
    return dialog("Warning", options);
  }
  function Error2(options) {
    return dialog("Error", options);
  }
  function Question(options) {
    return dialog("Question", options);
  }
  function OpenFile(options) {
    return dialog("OpenFile", options);
  }

  // desktop/clipboard.js
  var clipboard_exports = {};
  __export(clipboard_exports, {
    SetText: () => SetText,
    Text: () => Text
  });
  var call2 = newRuntimeCaller("clipboard");
  function SetText(text) {
    return call2("SetText", { text });
  }
  function Text() {
    return call2("Text");
  }

  // desktop/window.js
  function newWindow(id) {
    let call3 = newRuntimeCaller("window", id);
    return {
      // Reload: () => call('WR'),
      // ReloadApp: () => call('WR'),
      // SetSystemDefaultTheme: () => call('WASDT'),
      // SetLightTheme: () => call('WALT'),
      // SetDarkTheme: () => call('WADT'),
      Center: () => call3("Center"),
      SetTitle: (title) => call3("SetTitle", { title }),
      Fullscreen: () => call3("Fullscreen"),
      UnFullscreen: () => call3("UnFullscreen"),
      SetSize: (width, height) => call3("SetSize", { width, height }),
      Size: () => {
        return call3("Size");
      },
      SetMaxSize: (width, height) => call3("SetMaxSize", { width, height }),
      SetMinSize: (width, height) => call3("SetMinSize", { width, height }),
      SetAlwaysOnTop: (b) => call3("SetAlwaysOnTop", { alwaysOnTop: b }),
      SetPosition: (x, y) => call3("SetPosition", { x, y }),
      Position: () => {
        return call3("Position");
      },
      Screen: () => {
        return call3("Screen");
      },
      Hide: () => call3("Hide"),
      Maximise: () => call3("Maximise"),
      Show: () => call3("Show"),
      ToggleMaximise: () => call3("ToggleMaximise"),
      UnMaximise: () => call3("UnMaximise"),
      Minimise: () => call3("Minimise"),
      UnMinimise: () => call3("UnMinimise"),
      SetBackgroundColour: (r, g, b, a) => call3("SetBackgroundColour", { R, G, B, A })
    };
  }

  // desktop/main.js
  window.wails = {
    ...newRuntime(-1)
  };
  window._wails = {
    dialogCallback,
    dialogErrorCallback
  };
  function newRuntime(id) {
    return {
      // Log: newLog(id),
      // Browser: newBrowser(id),
      // Screen: newScreen(id),
      // Events: newEvents(id),
      Clipboard: {
        ...clipboard_exports
      },
      Dialog: {
        Info,
        Warning,
        Error: Error2,
        Question,
        OpenFile
      },
      Window: newWindow(id),
      Application: {
        Show: () => invoke("S"),
        Hide: () => invoke("H"),
        Quit: () => invoke("Q")
      }
      // GetWindow: function (windowID) {
      //     if (!windowID) {
      //         return this.Window;
      //     }
      //     return newWindow(windowID);
      // }
    };
  }
  if (true) {
    console.log("Wails v3.0.0 Debug Mode Enabled");
  }
})();
//# sourceMappingURL=data:application/json;base64,
